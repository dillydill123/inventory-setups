Need to add a prefix to layouts
 - Add >>>invsetup<<< to indicate it comes from inventory setup plugin
 - Could use the hash afterwards? Is it worth doing that? banktags.layout_>>>invsetup<<<_<<hash>> would be the key
 - In Data manager, we can check for layouts that don't exist anymore.
   - Gather all banktags.layout* and remove ones that don't have >>>invsetup<<<.
   - Go through all inventory setups. Check if a config key for banktags.layout_>>>invsetups<<<_<hash_of_name> exists. If so, remove from the list
   - Any remaining config keys with >>>invsetups<<< must be old ones and can be deleted.
 - Function to get layout key.
Setup Deleted
 - Remove the layout with layoutManager, Remove the tag as well
Setup Refreshed.
  - Redo the layout from scratch using preset or zigzag.
Setup Added
 - Create a layout with preset or zigzag and save it. Also create a tag.
Setup name Changed
 - Get the layout, remove the old layout and tag, and save a new layout and tag with the new name.

^^^ DONE ^^^
vvv TODO VVV

Start Bank Tags Plugin
  - What about Hub BTL? How should it be handled?
Need to create default layouts
  - Support two types - zigzag and preset.
  - Add a config option for the default.
Convert Bank Tag Layout data to core layout data.
  - How? Adam Layouts has a conversion.
  - Use a key to indicate if the conversion has happened before.
Items Changed in a Setup
  - If someone changes an item in a setup by slot, we need to update the layout (and tag) as well.
  - Item added: Just add the new item to the first slot -1 in the layout, also update the tag. If the item is fuzzy, simply mark that in the tag.
  - Item removed: Remove the first occurrence of that item in the layout, also update the tag. What if the item was fuzzy? Need to do the same algorithm as below for fuzzy toggled.
  - Item Swapped: Basically the two above combined. Replace the first occurrence of the old item in the layout with the new item, also update the tag.
Importing Setups
 - Maybe create an InventorySetupPortable? which has a layout object and a InventorySetup object. Can serialize that instead.
Exporting Setups
 - Use InventorySetupPortable idea from above?
Item fuzzy toggled
 - Update the tag with item and set variation
 - First, remove the tag and add it again with the new variation setting (done)
 - If adding, that's it, can stop there.
 - If removing, need to get all varations of that item and update the layout
   - Keep original itemId, get it's baseID and then get the variations. Remove original itemId from that list of variations to get the items that should be removed from the layout.
   - Iterate through the items in the layout and check (1) if it's in the list of variations and that it (2) is also not elsewhere in the setup (non fuzzy check).
     - If both these conditions are true, delete item from the layout.
     - Don't worry about the case that the same item might be fuzzy in another part of the setup and you should keep it in the layout. This is highly unlikely. Make a comment discussing this.
     - Don't worry about the case that the same item might have been deleted from the layout before elsewhere in the setup. This is highly unlikely. Make a comment discussing this.
Overwrite layout
 - Add option in additional worn items to overwrite layout. Also overwrite the tag.
Make sure all TODOs are taken care of